@import (reference) '../../variables.d.less';
@import (reference) '../../mixins.d.less';

.row-divided(@margin) {
    margin-top: (@margin / 2);
    padding-top: (@margin / 2);
}

/*
Grid

Create powerful multi-device layouts quickly and easily with the default 12-column, nest-able Foundation grid. If you're familiar with grid systems, you'll feel right at home. If not, you'll learn quickly.

See: http://foundation.zurb.com/sites/docs/grid.html

Breakpoints

- `xsmall: 320px`
- `small: 540px`
- `medium: 768px`
- `large: 960px`

Style guide: grid
*/

.container {
    overflow: hidden;
    width: 100%;
}

/*
Grid: Section Size

A section is the base layout component.

Markup:
<section class="section {{modifier_class}}">
    <div class="row">
        <div class="column">
            <h3>Demo time!</h3>
            <p>A paragraph of text with the {{modifier_class}} background modifier.</p>
            <p><a href="#">Regular Link</a></p>
            <p><a href="#" class="arrowLink">Arrow Link</a></p>
            <p><a href="#" class="button">Button Link</a></p>
        </div>
    </div>
</section>

.section-size0 - Description.
.section-size1 - Description.
.section-size2 - Description.
.section-size3 - Description.
.section-size5 - Description.
.section-size6 - Description.
.section-bottom-size0 - Description.

Style guide: grid.sectionsize
*/

.section {
    display: block;
    padding: @section-padding-size4 0;
    width: 100%;

    &.section-size0 {
        padding: 0;
    }

    &.section-size1 {
        padding: @section-padding-size1 0;
    }

    &.section-size2 {
        padding: @section-padding-size2 0;
    }

    &.section-size3 {
        padding: @section-padding-size3 0;
    }

    &.section-size5 {
        padding: @section-padding-size5 0;
    }

    &.section-size6 {
        padding: @section-padding-size6 0;
    }

    &.section-bottom-size0 {
        padding-bottom: 0;
    }
}

.column {
    & + & {
        margin-top: @responsive-gutter;
    }

    & > :last-child {
        margin-bottom: 0;
    }

    & > :first-child {
        margin-top: 0;
    }
}

/*
Grid: Row

Description.

Markup:
<section class="section">
    <div class="row {{modifier_class}} column">
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla congue condimentum risus eget mattis. Donec non sollicitudin felis. Duis convallis elit ac magna ornare imperdiet.</p>
    </div>
    <div class="row {{modifier_class}} column">
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla congue condimentum risus eget mattis. Donec non sollicitudin felis. Duis convallis elit ac magna ornare imperdiet.</p>
    </div>
</section>

.row-divided - Description.
.row-size0 - Description.
.row-size1 - Description.
.row-size2 - Description.
.row-size3 - Description.
.row-size4 - Description.
.row-size5 - Description.
.row-size6 - Description.

Style guide: grid.row
*/

/*
Grid: Row Positioning

Description.

Markup:
<section class="section">
    <div class="row {{modifier_class}}">
        <div class="column medium-6">
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla congue condimentum risus eget mattis. Donec non sollicitudin felis. Duis convallis elit ac magna ornare imperdiet.</p>
        </div>
        <div class="column medium-6">
            <img src="http://placehold.it/100/00abec/ffffff?text=WOW" />
        </div>
    </div>
</section>

.row-middled-flex - Description.
.row-middled - Description.

Style guide: grid.rowpositioning
*/

.row {
    & + & {
        margin-top: @responsive-gutter;
    }

    & + &.row-divided {
        border-top: 1px solid @color-slate08;
        padding-top: @responsive-gutter;
    }
}

@media only screen and (min-width: @resolution-xsmall) {
    .column[class*="xsmall-"] + .column[class*="xsmall-"] {
        margin-top: 0;
    }
}

@media only screen and (min-width: @resolution-small) {
    .column {
        & + & {
            margin-top: @responsive-gutter / 2;
        }
    }

    .column[class*="small-"] + .column[class*="small-"] {
        margin-top: 0;
    }

    .row {
        & + & {
            margin-top: @rowrow-margin;
        }

        & + &.row-divided {
            .row-divided(@rowrow-margin);
        }

        &.row-size0 {
            margin-top: 0;

            .row + &.row-divided {
                .row-divided(0);
            }
        }

        &.row-size1 {
            margin-top: @spacing-size1;

            .row + &.row-divided {
                .row-divided(@spacing-size1);
            }
        }

        &.row-size2 {
            margin-top: @spacing-size2;

            .row + &.row-divided {
                .row-divided(@spacing-size2);
            }
        }

        &.row-size3 {
            margin-top: @spacing-size3;

            .row + &.row-divided {
                .row-divided(@spacing-size3);
            }
        }

        &.row-size4 {
            margin-top: @spacing-size4;

            .row + &.row-divided {
                .row-divided(@spacing-size4);
            }
        }

        &.row-size5 {
            margin-top: @spacing-size5;

            .row + &.row-divided {
                .row-divided(@spacing-size5);
            }
        }

        &.row-size6 {
            margin-top: @spacing-size6;

            .row + &.row-divided {
                .row-divided(@spacing-size6);
            }
        }

        &.row-middled-flex {
            display: flex;
            align-items: center;
        }
    }
}

@media only screen and (min-width: @resolution-medium) {
    .column[class*="medium-"] + .column[class*="medium-"] {
        margin-top: 0;
    }

    .row {
        &.row-middled {
            .center();
            width: 100%;
        }
    }
}

@media only screen and (min-width: @resolution-large) {
    .column[class*="large-"] + .column[class*="large-"] {
        margin-top: 0;
    }
}
