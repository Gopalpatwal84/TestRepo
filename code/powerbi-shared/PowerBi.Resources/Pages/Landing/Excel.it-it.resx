<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Content1_Content" xml:space="preserve">
    <value>Sei stanco di complesse formule per combinare i dati? Grazie a Power BI puoi creare le relazioni a livello visivo e lasciare che sia Excel a occuparsi di tutto il resto.</value>
  </data>
  <data name="Content1_Heading" xml:space="preserve">
    <value>Combina i dati visivamente</value>
  </data>
  <data name="Content2_Content" xml:space="preserve">
    <value>Power BI include un linguaggio delle formule che funziona come Excel, consentendoti di iniziare rapidamente e ottenere risultati che ritenevi impossibili.</value>
  </data>
  <data name="Content2_Heading" xml:space="preserve">
    <value>Potenzia le tue formule</value>
  </data>
  <data name="Content3_Content" xml:space="preserve">
    <value>Liberati dalle continue richieste di report. Dopo avere creato le tue analisi con Power BI, resterai sorpreso nel constatare con quanta facilità gli altri possono ottenere autonomamente le risposte di cui hanno bisogno.</value>
  </data>
  <data name="Content3_Heading" xml:space="preserve">
    <value>Trasforma il tuo lavoro in un lavoro di gruppo</value>
  </data>
  <data name="Content4_Quote" xml:space="preserve">
    <value>[Power BI] consente al nostro team di ottenere informazioni significative invece di limitarsi a recuperare e distribuire dati.</value>
  </data>
  <data name="Content4_QuoteSource" xml:space="preserve">
    <value>Jeff Petrusa, team Marketing and Analytics, Conde Nast</value>
  </data>
  <data name="Download_Content" xml:space="preserve">
    <value>Ottieni tutti gli strumenti di Power BI in un solo pratico download. Puoi avere tutte le funzionalità precedenti, oltre a straordinari elementi visivi per presentare e condividere le tue analisi con altre persone.</value>
  </data>
  <data name="Download_Cta_Download" xml:space="preserve">
    <value>Scarica</value>
  </data>
  <data name="Download_Heading" xml:space="preserve">
    <value>Inizia con un solo semplice download</value>
  </data>
  <data name="Download_SubHeading" xml:space="preserve">
    <value>Scarica Power BI Desktop</value>
  </data>
  <data name="Hero_Content" xml:space="preserve">
    <value>Power BI è una soluzione realizzata dai creatori di Excel che offre nuovi modi di lavorare. Semplifica le formule complesse e potenzia le tabelle pivot.</value>
  </data>
  <data name="Hero_Cta_Download" xml:space="preserve">
    <value>Scarica</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>Usi VLOOKUP? Amerai Power BI.</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value>Power BI trasforma i dati aziendali in elementi visivi avanzati che puoi raccogliere e organizzare per visualizzare le informazioni a cui sei interessato, per rimanere sempre aggiornato, individuare le tendenze non appena si manifestano e incrementare l'attività.</value>
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>Excel | Microsoft Power BI</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>3</value>
  </data>
</root>