<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Content1_Content" xml:space="preserve">
    <value>厭倦了用淩亂的公式來結合資料？ Power BI 讓您以視覺化方式建立關聯性，而繁瑣運算只要交給我們幫您做即可。</value>
  </data>
  <data name="Content1_Heading" xml:space="preserve">
    <value>以視覺化方式結合您的資料</value>
  </data>
  <data name="Content2_Content" xml:space="preserve">
    <value>Power BI 包含的公式語言，用起來就像 Excel 一樣，所以您可以快速上手，實現以前想都不敢想的功能。</value>
  </data>
  <data name="Content2_Heading" xml:space="preserve">
    <value>強化您的公式</value>
  </data>
  <data name="Content3_Content" xml:space="preserve">
    <value>從永無止盡的報表要求中解脫。只要用過 Power BI 建立分析，您就會驚訝地發現，讓其他人自己用 Power BI 來取得所需的答案，容易許多。</value>
  </data>
  <data name="Content3_Heading" xml:space="preserve">
    <value>讓您的工作融入團隊合作</value>
  </data>
  <data name="Content4_Quote" xml:space="preserve">
    <value>[Power BI] 解放您的團隊，您可以將時間用在洞悉趨勢、故事行銷，而不只是提取並送出資料。</value>
  </data>
  <data name="Content4_QuoteSource" xml:space="preserve">
    <value>Jeff Petrusa，康泰納仕 (Condé Nast) 行銷分析團隊</value>
  </data>
  <data name="Download_Content" xml:space="preserve">
    <value>只要輕輕鬆鬆地下載一次，就能取得所有 Power BI 工具。上述功能一網打盡，還有更多驚艷的視覺化功能，讓您呈現分析結果給其他人，並加以共用。</value>
  </data>
  <data name="Download_Cta_Download" xml:space="preserve">
    <value>下載</value>
  </data>
  <data name="Download_Heading" xml:space="preserve">
    <value>只要輕鬆下載一次即可開始使用</value>
  </data>
  <data name="Download_SubHeading" xml:space="preserve">
    <value>下載 Power BI Desktop</value>
  </data>
  <data name="Hero_Content" xml:space="preserve">
    <value>Excel 的研發人員讓 Power BI 帶給您全新工作方式。簡化複雜的公式並強化樞紐分析表。</value>
  </data>
  <data name="Hero_Cta_Download" xml:space="preserve">
    <value>下載</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>使用 VLOOKUP 嗎？ 您會愛上 Power BI。</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value>Power BI 會將您公司的資料轉換成各種視覺效果，方便您加以收集及編排，讓您可以將全部注意力放在您關注的事物上。隨時掌握最新資訊，找出進行中的趨勢，並進一步推動業務。</value>
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>Excel | Microsoft Power BI</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>3</value>
  </data>
</root>