<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Content1_Content" xml:space="preserve">
    <value>데이터를 결합하는 복잡한 수식 때문에 짜증나셨나요? Power BI를 사용하여 관계를 시각적으로 표시하고 어려운 작업이 알아서 처리되는 것을 확인하세요.</value>
  </data>
  <data name="Content1_Heading" xml:space="preserve">
    <value>데이터를 시각적으로 결합</value>
  </data>
  <data name="Content2_Content" xml:space="preserve">
    <value>Power BI에는 Excel처럼 작동하는 수식 언어가 포함되어 있어 신속하게 시작하고 이전에는 불가능했던 결과를 얻을 수 있습니다.</value>
  </data>
  <data name="Content2_Heading" xml:space="preserve">
    <value>수식 강화</value>
  </data>
  <data name="Content3_Content" xml:space="preserve">
    <value>끊임없이 쏟아지는 보고서 요청에 일일이 답할 필요가 없습니다. Power BI로 분석 결과를 빌드해 두면 다른 사람들이 필요한 답을 스스로 아주 쉽게 얻을 수 있습니다.</value>
  </data>
  <data name="Content3_Heading" xml:space="preserve">
    <value>작업을 팀워크로 전환</value>
  </data>
  <data name="Content4_Quote" xml:space="preserve">
    <value>[Power BI] 덕분에 우리 팀은 단순히 데이터를 가져와서 전달하는 대신에 통찰력을 얻고 스토리텔링하는 데 더 많은 노력과 시간을 들일 수 있게 되었습니다..</value>
  </data>
  <data name="Content4_QuoteSource" xml:space="preserve">
    <value>Conde Nast 마케팅 및 분석팀 Jeff Petrusa</value>
  </data>
  <data name="Download_Content" xml:space="preserve">
    <value>한 번의 다운로드로 모든 Power BI 도구를 편리하게 가져옵니다. 위에서 설명한 모든 기능과 놀라운 시각적 개체를 가져와서 분석 내용을 표시하고 다른 사람과 공유하세요.</value>
  </data>
  <data name="Download_Cta_Download" xml:space="preserve">
    <value>다운로드</value>
  </data>
  <data name="Download_Heading" xml:space="preserve">
    <value>한 번의 간편한 다운로드로 시작</value>
  </data>
  <data name="Download_SubHeading" xml:space="preserve">
    <value>Power BI Desktop 다운로드</value>
  </data>
  <data name="Hero_Content" xml:space="preserve">
    <value>Microsoft Excel Power BI에서 새로운 기능을 제공합니다. 복잡한 수식을 단순화하고 피벗 테이블을 강화해 보세요.</value>
  </data>
  <data name="Hero_Cta_Download" xml:space="preserve">
    <value>다운로드</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>VLOOKUP를 사용하나요? Power BI를 즐겨 사용하게 될 것입니다.</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value>Power BI는 사용자가 중요한 내용에 집중할 수 있도록 회사의 데이터를 수집 및 구성이 가능한 풍부한 시각적 요소로 변환해 줍니다. 정보를 꾸준히 얻고 추세를 파악하여 비즈니스를 확장해 보세요.</value>
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>Excel | Microsoft Power BI</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>3</value>
  </data>
</root>