<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Content1_Content" xml:space="preserve">
    <value>データを結合するための扱いにくい数式にうんざりしていますか。 Power BI でリレーションシップを視覚的に作成して、複雑な作業がどのように簡単になるかをご覧ください。</value>
  </data>
  <data name="Content1_Heading" xml:space="preserve">
    <value>データの視覚的な結合</value>
  </data>
  <data name="Content2_Content" xml:space="preserve">
    <value>Power BI には Excel 同様に機能する数式言語が含まれているため、作業をすぐに開始して、以前は実現できなかったようなことを達成できます。</value>
  </data>
  <data name="Content2_Heading" xml:space="preserve">
    <value>充実した数式</value>
  </data>
  <data name="Content3_Content" xml:space="preserve">
    <value>レポート作成の終わりのない要求から解放されます。Power BI で自身の分析を構築するだけで、他のユーザーが独自に必要な回答をどれほど簡単に入手できるかに驚くはずです。</value>
  </data>
  <data name="Content3_Heading" xml:space="preserve">
    <value>単独の作業をチームワークに変える</value>
  </data>
  <data name="Content4_Quote" xml:space="preserve">
    <value>[Power BI] を使うと、チームはより多くの分析を行って、データをただ引き出してから引き渡すのではなく、データに意味を持たせることができるようになります。</value>
  </data>
  <data name="Content4_QuoteSource" xml:space="preserve">
    <value>Jeff Petrusa、マーケティングおよび分析チーム、Conde Nast</value>
  </data>
  <data name="Download_Content" xml:space="preserve">
    <value>1 回のダウンロードで Power BI ツールのすべてを取得できます。上記すべてのほか、分析を表示する優れたビジュアルを取得して、他のユーザーと分析を共有しましょう。</value>
  </data>
  <data name="Download_Cta_Download" xml:space="preserve">
    <value>ダウンロード</value>
  </data>
  <data name="Download_Heading" xml:space="preserve">
    <value>1 回のダウンロードで作業を開始する</value>
  </data>
  <data name="Download_SubHeading" xml:space="preserve">
    <value>Power BI Desktop をダウンロードする</value>
  </data>
  <data name="Hero_Content" xml:space="preserve">
    <value>Excel の開発者が Power BI により作業のための新しい方法を提供します。複雑な数式を簡素化し、ピボット テーブルをパワーアップしましょう。</value>
  </data>
  <data name="Hero_Cta_Download" xml:space="preserve">
    <value>ダウンロード</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>VLOOKUP をお使いですか? Power BI が気に入ることでしょう。</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value>Power BI は、会社のデータを豊かな視覚情報に変換して収集と整理を助け、重要な問題に取り組めるようにします。最新情報を取得し、動向の発生をつかみ、ビジネスをさらに推進します。</value>
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>Excel | Microsoft Power BI</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>3</value>
  </data>
</root>