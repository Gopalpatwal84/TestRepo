<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="D32Bit" xml:space="preserve">
    <value>para Office de 32 bits</value>
  </data>
  <data name="D64Bit" xml:space="preserve">
    <value>para Office de 64 bits</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>Descargar</value>
  </data>
  <data name="Hero_Copy" xml:space="preserve">
    <value>Gracias al publicador de Power BI para Excel, podrá guardar en una sola ubicación las instantáneas de sus tablas dinámicas, gráficos, rangos de celdas y otros elementos importantes de todas las hojas de cálculo. Solo tiene que descargar e instalar el complemento, y comenzará a anclar datos desde el libro a su panel de Excel en cuestión de segundos. Su nuevo panel es muy fácil de actualizar y compartir, e incluye todas las características del servicio Power BI gratuito, como la combinación de varias hojas en un único panel y la conexión a datos activos desde cualquier aplicación web que utilice.</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>La forma más sencilla de crear y compartir paneles de Excel</value>
  </data>
  <data name="LearnMore" xml:space="preserve">
    <value>Más información</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value>Power BI transforma los datos de su compañía en objetos visuales enriquecidos que puede recopilar y organizar, lo que le permite centrarse en lo que realmente importa. Manténgase informado, detecte las tendencias en cuanto surgen e impulse su negocio.</value>
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>Power BI publisher for Excel | Microsoft Power BI</value>
  </data>
  <data name="PreferredLanguage" xml:space="preserve">
    <value>Descárguelo en el idioma que desee</value>
  </data>
  <data name="RightData_Copy" xml:space="preserve">
    <value>Gracias a Power BI, podrá facilitar a sus compañeros de los departamentos de ventas, finanzas, marketing y atención al cliente los datos necesarios para que puedan hacer un trabajo impecable sin tener que distribuir hojas de cálculo ni iniciar sesión en diferentes servicios.</value>
  </data>
  <data name="RightData_Heading" xml:space="preserve">
    <value>Proporcione los datos adecuados a las personas adecuadas</value>
  </data>
  <data name="SaveShare_Copy" xml:space="preserve">
    <value>Use el Publicador de Power BI para Excel para convertir los análisis de datos complejos en paneles accesibles, fáciles de compartir y aún más fáciles de entender. Asimismo, podrá actualizar las tablas y rangos anclados desde Excel mediante el Administrador de anclaje.</value>
  </data>
  <data name="SaveShare_Heading" xml:space="preserve">
    <value>Guarde y comparta los datos de Excel fuera de la cuadrícula</value>
  </data>
  <data name="SingleDashboard_Copy" xml:space="preserve">
    <value>Power BI puede recopilar otros muchos elementos, aparte de las instantáneas de Excel. Por ejemplo, puede importar datos de más de 45 servicios diferentes en un solo panel. Combine servicios como Salesforce, Github y Stripe para obtener la mejor información sobre las métricas.</value>
  </data>
  <data name="SingleDashboard_Heading" xml:space="preserve">
    <value>Incorpore diversos servicios web en un solo panel</value>
  </data>
  <data name="Sources_Copy" xml:space="preserve">
    <value>Datos de Excel, aplicaciones web y orígenes locales: Power BI reúne todos sus datos para que pueda comenzar a analizarlos en segundos.</value>
  </data>
  <data name="Try_Heading" xml:space="preserve">
    <value>Pruebe hoy mismo el publicador de Power BI para Excel y comience a compartir los detalles clave de sus documentos.</value>
  </data>
  <data name="WhatVersion" xml:space="preserve">
    <value>¿Cuál es mi versión de Office?</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>113</value>
  </data>
</root>