<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="D32Bit" xml:space="preserve">
    <value>针对 32 位 Office</value>
  </data>
  <data name="D64Bit" xml:space="preserve">
    <value>针对 64 位 Office</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>下载</value>
  </data>
  <data name="Hero_Copy" xml:space="preserve">
    <value>借助 Power BI Publisher for Excel，可将重要的数据透视表、图表、单元格区域以及所有 Excel 电子表格中的其他内容的快照保存到一个单独位置。只需下载和安装外接程序，即可在数秒内将数据从工作簿固定到自己的 Excel 仪表板。新仪表板易于更新和共享，并且随附了免费 Power BI 服务的所有功能，例如将多个表合并到一个仪表板以及从所用的其他 Web 应用连接到实时数据。</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>创建和共享 Excel 仪表板的最轻松方式</value>
  </data>
  <data name="LearnMore" xml:space="preserve">
    <value>了解详细信息</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value>Power BI 可将你公司的数据转换为丰富的视觉对象，便于你进行收集和组织，从而使你能够集中关注重要的内容。始终获悉最新信息、掌握即时趋势并进一步推动你的业务。</value>
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>Power BI Publisher for Excel | Microsoft Power BI</value>
  </data>
  <data name="PreferredLanguage" xml:space="preserve">
    <value>下载你的首选语言</value>
  </data>
  <data name="RightData_Copy" xml:space="preserve">
    <value>通过 Power BI，你可在销售、财务、市场营销和客户支持方面利用同事所需的数据故事支持他们，使他们无需分发电子表格或登录其他服务便可出色完成作业。</value>
  </data>
  <data name="RightData_Heading" xml:space="preserve">
    <value>将合适的数据分给合适的人</value>
  </data>
  <data name="SaveShare_Copy" xml:space="preserve">
    <value>使用 Power BI Publisher for Excel 将复杂的数据分析转到易于共享、易于理解的可访问仪表板。使用固定管理器更新 Excel 内的固定表格和区域。</value>
  </data>
  <data name="SaveShare_Heading" xml:space="preserve">
    <value>保存和共享网格外的 Excel 数据</value>
  </data>
  <data name="SingleDashboard_Copy" xml:space="preserve">
    <value>Power BI 不仅仅汇总了 Excel 快照：你可以将来自超过 45 种不同服务的数据导入到一个仪表板中。合并 Salesforce、Github、Stripe 等，形成最终指标概览。</value>
  </data>
  <data name="SingleDashboard_Heading" xml:space="preserve">
    <value>在一个仪表板上合并多个 Web 服务</value>
  </data>
  <data name="Sources_Copy" xml:space="preserve">
    <value>Excel 数据、Web 应用程序和本地来源：Power BI 汇总了你所有的数据，让你能够快速开始分析。</value>
  </data>
  <data name="Try_Heading" xml:space="preserve">
    <value>立即试用 Power BI Publisher for Excel 并开始共享你的重要见解。</value>
  </data>
  <data name="WhatVersion" xml:space="preserve">
    <value>我使用的是哪个版本的 Office？</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>114</value>
  </data>
</root>