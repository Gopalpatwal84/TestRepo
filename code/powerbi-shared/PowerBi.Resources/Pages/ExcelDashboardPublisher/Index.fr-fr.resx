<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="D32Bit" xml:space="preserve">
    <value>pour Office 32 bits</value>
  </data>
  <data name="D64Bit" xml:space="preserve">
    <value>pour Office 64 bits</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>Télécharger</value>
  </data>
  <data name="Hero_Copy" xml:space="preserve">
    <value>Grâce à Power BI Publisher pour Excel, enregistrez les instantanés de tableaux croisés dynamiques, de graphiques, de plages de cellules et d’autres éléments importants provenant de toutes vos feuilles de calcul à un même emplacement. Il vous suffit de télécharger et d’installer le complément et vous épinglerez en quelques secondes des données depuis votre classeur vers votre tableau de bord Excel. Votre nouveau tableau de bord est facile à mettre à jour et à partager. Il est fourni avec toutes les fonctionnalités du service Power BI gratuit, telles que l’association de plusieurs feuilles sur un seul tableau de bord et la connexion aux données actives depuis les autres applications que vous utilisez.</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>La façon la plus simple de créer et de partager des tableaux de bord Excel</value>
  </data>
  <data name="LearnMore" xml:space="preserve">
    <value>En savoir plus</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value>Power BI transforme les données de votre entreprise en riches éléments visuels que vous pouvez collecter et organiser sans difficulté comme vous le voulez, pour que vous puissiez vous concentrer sur ce qui est vraiment important. Restez au fait des changements, repérez les tendances en temps réel et poussez votre entreprise encore plus loin.</value>
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>Éditeur Power BI pour Excel | Microsoft Power BI</value>
  </data>
  <data name="PreferredLanguage" xml:space="preserve">
    <value>Télécharger dans la langue de votre choix</value>
  </data>
  <data name="RightData_Copy" xml:space="preserve">
    <value>Avec Power BI, vous pouvez donner à vos collègues des départements commercial, financier, marketing et service client les données dont ils ont besoin pour leur travail, sans distribuer des feuilles de calcul ni devoir se connecter à différents services.</value>
  </data>
  <data name="RightData_Heading" xml:space="preserve">
    <value>Communiquez les bonnes données aux bonnes personnes</value>
  </data>
  <data name="SaveShare_Copy" xml:space="preserve">
    <value>Utilisez l’éditeur Power BI pour Excel pour transformer vos analyses de données complexes en tableaux de bord accessibles, faciles à partager et encore plus faciles à comprendre. Mettez à jour vos tableaux et vos plages épinglés depuis Excel avec le Gestionnaire d’éléments épinglés.</value>
  </data>
  <data name="SaveShare_Heading" xml:space="preserve">
    <value>Enregistrer et partager des données Excel en dehors de la grille</value>
  </data>
  <data name="SingleDashboard_Copy" xml:space="preserve">
    <value>Avec Power BI, vous pouvez faire bien plus que rassembler des instantanés Excel : vous pouvez importer des données provenant de plus de 45 services différents dans un même tableau de bord. Combinez Salesforce, GitHub, Stripe et d’autres services pour obtenir une vue d’ensemble parfaite de différentes métriques.</value>
  </data>
  <data name="SingleDashboard_Heading" xml:space="preserve">
    <value>Réunissez plusieurs services web sur un même tableau de bord</value>
  </data>
  <data name="Sources_Copy" xml:space="preserve">
    <value>Données Excel, applications web et sources locales : Power BI rassemble vos données et vous permet ainsi de commencer à analyser vos données en quelques secondes.</value>
  </data>
  <data name="Try_Heading" xml:space="preserve">
    <value>Essayez dès aujourd’hui l’éditeur Power BI pour Excel et commencez à partager vos informations clés.</value>
  </data>
  <data name="WhatVersion" xml:space="preserve">
    <value>Quelle version d’Office suis-je en train d’utiliser ?</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>113</value>
  </data>
</root>