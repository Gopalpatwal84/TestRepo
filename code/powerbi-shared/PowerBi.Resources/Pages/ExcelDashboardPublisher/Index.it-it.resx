<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="D32Bit" xml:space="preserve">
    <value>per Office a 32 bit</value>
  </data>
  <data name="D64Bit" xml:space="preserve">
    <value>per Office a 64 bit</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>Scarica</value>
  </data>
  <data name="Hero_Copy" xml:space="preserve">
    <value>Salva snapshot di tabelle pivot, grafici, intervalli di celle e altri elementi importanti da qualsiasi foglio di calcolo in un'unica posizione con Power BI Publisher per Excel. Basta scaricare e installare il componente aggiuntivo e in pochi secondi potrai aggiungere dati da una cartella di lavoro nel tuo dashboard di Excel personale. Il nuovo dashboard è facile da aggiornare e condividere ed è dotato di tutte le funzionalità del servizio Power BI gratuito, come la combinazione di più fogli in un unico dashboard e la connessione ai dati in tempo reale da altre app Web.</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>Il modo più facile per creare e condividere dashboard di Excel</value>
  </data>
  <data name="LearnMore" xml:space="preserve">
    <value>Scopri di più</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value>Power BI trasforma i dati aziendali in elementi visivi avanzati che puoi raccogliere e organizzare per visualizzare le informazioni a cui sei interessato, per rimanere sempre aggiornato, individuare le tendenze non appena si manifestano e incrementare l'attività.</value>
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>Power BI Publisher per Excel | Microsoft Power BI</value>
  </data>
  <data name="PreferredLanguage" xml:space="preserve">
    <value>Scarica nella tua lingua</value>
  </data>
  <data name="RightData_Copy" xml:space="preserve">
    <value>Con Power BI, puoi fornire ai tuoi colleghi che si occupano di vendite, finanza, marketing e assistenza clienti tutti i dati di cui hanno bisogno per comprendere ogni scenario e lavorare al meglio, senza distribuire fogli di calcolo o accedere a servizi diversi.</value>
  </data>
  <data name="RightData_Heading" xml:space="preserve">
    <value>Ottieni i dati giusti dalle persone giuste</value>
  </data>
  <data name="SaveShare_Copy" xml:space="preserve">
    <value>Usa Power BI Publisher per Excel per trasformare complesse analisi dei dati in dashboard accessibili, facili da condividere e anche più facili da comprendere. Aggiorna le tabelle e gli intervalli aggiunti dall'interno di Excel con Gestione aggiunte.</value>
  </data>
  <data name="SaveShare_Heading" xml:space="preserve">
    <value>Salva e condividi i dati di Excel all'esterno della griglia</value>
  </data>
  <data name="SingleDashboard_Copy" xml:space="preserve">
    <value>Power BI non riunisce solo snapshot di Excel: è possibile importare dati da più di 45 servizi diversi in un singolo dashboard. Combina Salesforce, Github, Stripe e altro per ottenere una straordinaria visione delle metriche.</value>
  </data>
  <data name="SingleDashboard_Heading" xml:space="preserve">
    <value>Più servizi Web in un unico dashboard unificato</value>
  </data>
  <data name="Sources_Copy" xml:space="preserve">
    <value>Dati di Excel, applicazioni Web e origini locali: Power BI riunisce tutti i tuoi dati, che potrai iniziare ad analizzare in pochi secondi.</value>
  </data>
  <data name="Try_Heading" xml:space="preserve">
    <value>Prova subito Power BI Publisher per Excel e inizia a condividere le tue informazioni chiave.</value>
  </data>
  <data name="WhatVersion" xml:space="preserve">
    <value>Qual è la versione di Office in uso?</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>113</value>
  </data>
</root>