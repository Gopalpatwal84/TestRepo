<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="D32Bit" xml:space="preserve">
    <value>適用於 Office (32 位元)</value>
  </data>
  <data name="D64Bit" xml:space="preserve">
    <value>適用於 Office (64 位元)</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>下載</value>
  </data>
  <data name="Hero_Copy" xml:space="preserve">
    <value>使用 Power BI Publisher for Excel，將您所有試算表的重要樞紐分析表、圖表、儲存格範圍等項目的快照集儲存至單一位置。只要下載並安裝增益集，您便可以快速將資料從活頁簿釘選至您的 Excel 儀表板。新儀表板將可以輕鬆進行更新及共用，且具備所有免費 Power BI 服務的功能，例如在單一儀表板上合併多個工作表，以及從其他您所使用的 Web 應用程式連接至即時資料。</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>建立及共用 Excel 儀表板最簡單的方法</value>
  </data>
  <data name="LearnMore" xml:space="preserve">
    <value>深入了解</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value>Power BI 會將您公司的資料轉換成各種視覺效果，方便您加以收集及編排，讓您可以將全部注意力放在您關注的事物上。隨時掌握最新資訊，找出進行中的趨勢，並進一步推動業務。</value>
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>Power BI Publisher for Excel | Microsoft Power BI</value>
  </data>
  <data name="PreferredLanguage" xml:space="preserve">
    <value>以您偏好的語言下載</value>
  </data>
  <data name="RightData_Copy" xml:space="preserve">
    <value>您的同事透過 Power BI 所提供達成工作目標所需的資料案例，就能支援銷售、財務、行銷及客戶，省去收集一堆試算表或登入不同服務的麻煩。</value>
  </data>
  <data name="RightData_Heading" xml:space="preserve">
    <value>將正確的資料交給正確的人。</value>
  </data>
  <data name="SaveShare_Copy" xml:space="preserve">
    <value>使用 Power BI publisher for Excel 將複雜的資料分析轉換成可存取的儀表板，易於進行分享且容易理解。從 Excel 的釘選管理員更新您已釘選的資料表及範圍。</value>
  </data>
  <data name="SaveShare_Heading" xml:space="preserve">
    <value>以方格以外的方式儲存及分享 Excel 資料</value>
  </data>
  <data name="SingleDashboard_Copy" xml:space="preserve">
    <value>Power BI 不只整合 Excel 快照：您能將重要資料從超過 45 項不同的服務，匯入至單一儀表板中。為最終計量概觀結合 Salesforce、Github、Stripe 以及其他資訊。</value>
  </data>
  <data name="SingleDashboard_Heading" xml:space="preserve">
    <value>在單一儀表板聯合多重 Web 服務</value>
  </data>
  <data name="Sources_Copy" xml:space="preserve">
    <value>Excel 資料、Web 應用程式以及內部部署來源：Power BI 整合所有資料，讓您能立刻進行分析。</value>
  </data>
  <data name="Try_Heading" xml:space="preserve">
    <value>馬上試試 Power BI publisher for Excel，開始分享您重要的深入解析。</value>
  </data>
  <data name="WhatVersion" xml:space="preserve">
    <value>我使用的是哪個版本的 Office？</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>113</value>
  </data>
</root>