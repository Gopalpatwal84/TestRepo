<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="D32Bit" xml:space="preserve">
    <value>für Office (32 Bit)</value>
  </data>
  <data name="D64Bit" xml:space="preserve">
    <value>für Office (64 Bit)</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="Hero_Copy" xml:space="preserve">
    <value>Mit Power BI Publisher für Excel können Sie Momentaufnahmen von wichtigen PivotTables, Diagrammen, Zellbereichen und vielem mehr aus allen Ihren Kalkulationstabellen an zentraler Stelle speichern. Sie brauchen das Add-In nur herunterzuladen und zu installieren, und schon können Sie mit dem Anheften von Daten aus Ihrer Arbeitsmappe an Ihr eigenes Excel-Dashboard beginnen. Das neue Dashboard lässt sich ganz einfach aktualisieren und freigeben. Alle Features des kostenlosen Power BI-Diensts stehen Ihnen zur Verfügung wie etwa das Zusammenfassen mehrerer Tabellen auf einem Dashboard und das Herstellen von Verbindungen mit Livedaten aus anderen verwendeten Web-Apps.</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>Einfaches Erstellen und Freigeben von Excel-Dashboards</value>
  </data>
  <data name="LearnMore" xml:space="preserve">
    <value>Weitere Informationen</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value>Power BI wandelt die Daten Ihres Unternehmens in visuelle Darstellungen um. Mit Power BI können Sie Ihre Daten sammeln und strukturieren und das Augenmerk auf die für Sie wichtigsten Punkte legen. Bleiben Sie auf dem Laufenden, erkennen Sie Trends und bringen Sie Ihr Geschäft voran.</value>
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>Power BI Publisher für Excel | Microsoft Power BI</value>
  </data>
  <data name="PreferredLanguage" xml:space="preserve">
    <value>Gewünschte Sprachversion herunterladen</value>
  </data>
  <data name="RightData_Copy" xml:space="preserve">
    <value>Mit Power BI können Sie Ihre Kollegen in den Abteilungen Vertrieb, Finanzen, Marketing und Kundenservice mit den Daten versorgen, die sie zum Erledigen ihrer Aufgaben brauchen, ohne dass Kalkulationstabellen verteilt oder Anmeldungen bei verschiedenen Diensten erfolgen müssen.</value>
  </data>
  <data name="RightData_Heading" xml:space="preserve">
    <value>Bereitstellen der richtigen Daten für die, die sie brauchen</value>
  </data>
  <data name="SaveShare_Copy" xml:space="preserve">
    <value>Wandeln Sie mit dem Power BI Publisher für Excel Ihre komplexen Datenanalysen in einfach zugängliche Dashboards um, die einfach freizugeben und noch einfacher zu verstehen sind. Mithilfe entsprechender Verwaltungsfunktionen können Sie Ihre angehefteten Tabellen und Bereiche in Excel aktualisieren.</value>
  </data>
  <data name="SaveShare_Heading" xml:space="preserve">
    <value>Speichern und Freigeben von Excel-Daten außerhalb des Rasters</value>
  </data>
  <data name="SingleDashboard_Copy" xml:space="preserve">
    <value>Power BI ermöglicht mehr als das bloße Zusammenführen von Excel-Momentaufnahmen, denn Sie können Daten aus über 45 Diensten in ein Dashboard importieren. Kombinieren Sie Salesforce, GitHub, Stripe und mehr, um sich den ultimativen Überblick über Ihre Metriken zu verschaffen.</value>
  </data>
  <data name="SingleDashboard_Heading" xml:space="preserve">
    <value>Vereinen mehrerer Webdienste auf einem einzelnen Dashboard</value>
  </data>
  <data name="Sources_Copy" xml:space="preserve">
    <value>Excel-Daten, Webanwendungen und lokale Quellen: Power BI bringt alle Ihre Daten zusammen, damit Sie in Sekundenschnelle mit der Analyse beginnen können.</value>
  </data>
  <data name="Try_Heading" xml:space="preserve">
    <value>Probieren Sie den Power BI Publisher für Excel noch heute aus, und beginnen Sie, Ihre wichtigsten Erkenntnisse mit anderen zu teilen.</value>
  </data>
  <data name="WhatVersion" xml:space="preserve">
    <value>Welche Version von Office verwende ich?</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>113</value>
  </data>
</root>