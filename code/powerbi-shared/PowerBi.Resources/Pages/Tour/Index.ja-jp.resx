<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Decisions_Copy" xml:space="preserve">
    <value>データに圧倒されるのではなく、データから力を得る必要があります。Power BI では、データとの対話を簡単に行えます。単純なドラッグ アンド ドロップ ジェスチャでデータの傾向を発見したり、自然言語のクエリを使用して瞬時に答えを得たりすることが可能です。</value>
  </data>
  <data name="Decisions_Heading" xml:space="preserve">
    <value>データを意思決定に変換</value>
  </data>
  <data name="Details_Copy" xml:space="preserve">
    <value>Power BI なら、魅力的な視覚エフェクトで効果的なプレゼンテーションができ、対話型のダッシュボードでビジネスの全体像をリアルタイムで把握できます。実際のアナリストに対して、Power BI Desktop では、ドラッグ アンド ドロップでデータを探索できるフリー フォームのキャンバスを提供します。さらに、対話操作によるビジュアル化、簡単な操作によるレポート作成、Power BI サービスへの迅速な発行などの、大規模なライブラリも利用できます。</value>
  </data>
  <data name="Details_Heading" xml:space="preserve">
    <value>詳細情報に命を吹き込む</value>
  </data>
  <data name="Hero_Copy" xml:space="preserve">
    <value>Power BI はデータを機能豊富なビジュアル表現に変換します。お客様は、自由自在にデータを整理して、最も重要な課題に焦点を合わせることができます。強力なセルフサービスの機能により、情報を常に把握し、データに表れている傾向を識別できるため、お客様のビジネスを推進するために役立ちます。</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>重要な課題にフォーカス</value>
  </data>
  <data name="Introducing_Heading" xml:space="preserve">
    <value>Power BI の紹介</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value>Power BI は、会社のデータを豊かな視覚情報に変換して収集と整理を助け、重要な問題に取り組めるようにします。最新情報を取得し、動向の発生をつかみ、ビジネスをさらに推進します。</value>
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>ツアー | Microsoft Power BI</value>
  </data>
  <data name="OnePane_Copy" xml:space="preserve">
    <value>Power BI は、オンプレミスとクラウドにあるすべての情報を 1 つの場所にまとめるので、いつでもどこからでもアクセスできます。また、パッケージに含まれているコンテンツ パックやコネクタを使用すると、Marketo、Salesforce、Google アナリティクスなど、多くのソリューションからデータをインポートすることもできます。</value>
  </data>
  <data name="OnePane_Heading" xml:space="preserve">
    <value>1 つのウィンドウで全体像を把握できます</value>
  </data>
  <data name="ShareWeb_Copy" xml:space="preserve">
    <value>Power BI Publish to Web であなたのデータ ストーリーを発信し、場所やデバイスを問わず大勢のユーザーに伝えてください。データ ソースを 1 つにまとめ、魅力的な視覚化を簡単に作成できます。また、数分で Web サイトにストーリーを埋め込むことができます。</value>
  </data>
  <data name="ShareWeb_Heading" xml:space="preserve">
    <value>Web サイトまたはブログで洞察を共有</value>
  </data>
  <data name="Share_Copy" xml:space="preserve">
    <value>Power BI ではダッシュボードやレポートを共有できるため、どこからでも、必要な相手と情報を共有できます。Windows、iOS、Android 用の Power BI アプリを使用して、常に最新の情報を入手できます。データに変化があるとすぐにアラートが送られるので、チームと協力してすぐに対処できます。</value>
  </data>
  <data name="Share_Heading" xml:space="preserve">
    <value>洞察の世界を共有</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>6</value>
  </data>
</root>