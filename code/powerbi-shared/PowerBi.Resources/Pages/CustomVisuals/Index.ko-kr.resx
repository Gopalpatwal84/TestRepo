<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Extend_Content" xml:space="preserve">
    <value>곧 Power BI를 확장할 수 있습니다. 오픈 소스 프레임워크를 사용하여 빌드한 시각적 개체를 Power BI 보고서, 대시보드, 질문 및 대답에서 그대로 사용할 수 있습니다.</value>
  </data>
  <data name="Extend_Heading" xml:space="preserve">
    <value>Power BI 확장</value>
  </data>
  <data name="GetReady_Content" xml:space="preserve">
    <value>Mircosoft는 개발자가 Power BI를 확장할 수 있도록 Power BI에서 제공하는 모든 시각적 개체의 소스 코드를 제공합니다. 고품질의 Power BI용 사용자 지정 시각적 개체를 신속하게 만들 수 있습니다.</value>
  </data>
  <data name="GetReady_Heading" xml:space="preserve">
    <value>준비</value>
  </data>
  <data name="Hero_Content" xml:space="preserve">
    <value>이제 개발자가 사용자 지정 시각적 개체를 Power BI에 쉽게 추가하여 대시보드, 보고서, 콘텐츠 팩에서 사용할 수 있습니다. Microsoft는 개발자를 돕기 위해 모든 시각화 코드를 GitHub에 게시했습니다. 또한 시각화 프레임워크와 함께 테스트 도구 모음 및 도구를 제공하여 개발자 커뮤니티에서 고품질의 Power BI용 사용자 지정 시각적 개체를 빌드하도록 지원합니다. 이 모든 것을 GitHub에서 오픈 소스 프로젝트로 사용할 수 있습니다.</value>
  </data>
  <data name="Hero_CTA" xml:space="preserve">
    <value>Github에서 시작</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>사용자 지정 시각적 개체를 사용하여 Power BI 확장</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value />
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>사용자 지정 시각적 개체 | Microsoft Power BI</value>
  </data>
  <data name="OpenAndModern_Content" xml:space="preserve">
    <value>오픈 소스 시각적 개체 및 프레임워크는 D3, HTML5, CSS3와 같은 기술을 사용하여 빌드됩니다. 코드가 오픈 소스이므로 사용자 지정 시각적 개체를 쉽게 작성할 수 있습니다.</value>
  </data>
  <data name="OpenAndModern_Heading" xml:space="preserve">
    <value>개방성 및 최신성</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>64</value>
  </data>
</root>