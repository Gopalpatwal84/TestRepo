<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DataVisualization_Content" xml:space="preserve">
    <value>Do you have the goal of creating compelling data stories that are deeply engaging, capture the audience’s attention, and help others understand the information better? Power BI provides access to powerful analytics tools to help construct interesting data stories while making it easy for journalists to build and share highly interactive data visualizations.</value>
  </data>
  <data name="DataVisualization_Heading" xml:space="preserve">
    <value>Use data visualization to enhance your stories</value>
  </data>
  <data name="Distribute_Content" xml:space="preserve">
    <value>Power BI can help you get the story to the audience. Share your story in just a few clicks with Microsoft Power BI publish to web to embed your data visualization in your blog or website. Reach unlimited views on any device. Edit, update, refresh easily and control what content you publish.</value>
  </data>
  <data name="Distribute_Heading" xml:space="preserve">
    <value>Distribute interactive visualizations with Power BI</value>
  </data>
  <data name="Hero_Content" xml:space="preserve">
    <value>&lt;p&gt;With Microsoft Power BI, data journalism goes beyond data exploration and allows reporters, bloggers, broadcasters, and analysts to spend their time telling stories. The data visualization tool helps emphasize messages and engage audiences through immersive and data rich stories.&lt;/p&gt;
&lt;p&gt;Power BI recently teamed up with renowned visualization expert Alberto Cairo to share the methodology behind graphics and how they can support data storytelling by developing five &lt;strong&gt;Data Visualization and Storytelling&lt;/strong&gt; courses. Receive an overview of the courses by watching the video above and access the classes by clicking on the link below.&lt;/p&gt;</value>
  </data>
  <data name="Hero_Cta" xml:space="preserve">
    <value>Visit the courses</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>Data visualization and storytelling</value>
  </data>
  <data name="King5_Content" xml:space="preserve">
    <value>KING 5 News chose Microsoft Power BI because of the unique ability to integrate data visualizations on air, desktops and mobile devices. Microsoft also showed it is committed to providing data journalists with the technology to give viewers and readers more insights into data stories.</value>
  </data>
  <data name="King5_Heading" xml:space="preserve">
    <value>See what data journalists are doing with Power BI</value>
  </data>
  <data name="LearnMore" xml:space="preserve">
    <value>Learn more</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value />
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value>data journalism, data visualization, data storytelling, data journalism tools, Tableau, Tableau Public, Google Data Studio, Amazon QuickSight, Qlik, QlikView, publish to web</value>
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>Data Journalism | Microsoft Power BI</value>
  </data>
  <data name="Modal_Cta" xml:space="preserve">
    <value>View now</value>
  </data>
  <data name="Modal_Heading" xml:space="preserve">
    <value>Enter your email to view tutorials</value>
  </data>
  <data name="PublishToWeb_Content" xml:space="preserve">
    <value>The best stories are often interactive, visually pleasing, and include rich data. Power BI publish to web makes it easy for media to weave interactive data visualizations into stories without requiring any code to be written.</value>
  </data>
  <data name="PublishToWeb_Cta" xml:space="preserve">
    <value>View more</value>
  </data>
  <data name="PublishToWeb_Heading" xml:space="preserve">
    <value>Learn more about Power BI publish to web for storytelling</value>
  </data>
  <data name="ReadMore" xml:space="preserve">
    <value>Read more</value>
  </data>
  <data name="SeeMore" xml:space="preserve">
    <value>See more</value>
  </data>
  <data name="TakeAdvantage" xml:space="preserve">
    <value>Take advantage of Power BI</value>
  </data>
  <data name="UseItFree_Cta" xml:space="preserve">
    <value>Use it free</value>
  </data>
</root>