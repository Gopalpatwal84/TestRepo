<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DataVisualization_Content" xml:space="preserve">
    <value>注目度が高く、閲覧者の注意を捉え、情報を理解するのに役立つ、説得力のあるデータ ストーリーを作成することを目標にしておられる方にお勧めです。 Power BI は、興味深いデータ ストーリーを作成するのに役立つ強力な分析ツールへのアクセスを提供し、ジャーナリストが可視化された対話性の高いデータを簡単に作成および共有できるようにします。</value>
  </data>
  <data name="DataVisualization_Heading" xml:space="preserve">
    <value>データ可視化を使用してストーリーを拡張する</value>
  </data>
  <data name="Distribute_Content" xml:space="preserve">
    <value>Power BI は、ストーリーを閲覧者に届けるのに役立ちます。数回のクリックで Microsoft Power BI Publish to Web とストーリーを共有し、可視化されたデータをブログや Web サイトに埋め込むことができます。どんなデバイスからでも制限なく表示できます。発行したコンテンツを簡単に編集、アップデート、更新し、制御できます。</value>
  </data>
  <data name="Distribute_Heading" xml:space="preserve">
    <value>Power BI で対話型の可視化を配布する</value>
  </data>
  <data name="Hero_Content" xml:space="preserve">
    <value>&lt;p&gt;Microsoft Power BI を使用するとデータ ジャーナリズムはデータ探索の域を超えるため、レポーター、ブロガー、放送者、分析者はストーリーを作成することに時間を費やすことができます。データ可視化ツールは、引き込む力が強くデータが豊富なストーリーにより、メッセージを強調し、閲覧者を惹きつけるのに役立ちます。&lt;/p&gt;
&lt;p&gt;Power BI は最近、グラフィックスの背後にある方法や、5 つの &lt;strong&gt;データ可視化および画像と映像&lt;/strong&gt;のコースを選定することによってデータに意味を持たせる画像と映像をサポートする方法について共有するために、有名な視覚化のエキスパート Alberto Cairo と協力しました。上にあるビデオを視聴し、以下のリンクをクリックしてクラスにアクセスすることにより、このコースの概要をご理解いただけます。&lt;/p&gt;</value>
  </data>
  <data name="Hero_Cta" xml:space="preserve">
    <value>コースにアクセスする</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>データの可視化および画像と映像</value>
  </data>
  <data name="King5_Content" xml:space="preserve">
    <value>KING 5 News は、放送中、デスクトップ、およびモバイルデバイスでのデータの可視化を統合するユニークな機能を備えた Microsoft Power BI を選びました。Microsoft は、データ ストーリーに関するより多くの洞察を閲覧者や読者に提供するためのテクノロジを、データ ジャーナリストに提供することに努めていることも示しました。</value>
  </data>
  <data name="King5_Heading" xml:space="preserve">
    <value>データ ジャーナリストによる Power BI の活用方法を見る</value>
  </data>
  <data name="LearnMore" xml:space="preserve">
    <value>詳細情報</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value />
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value>データ ジャーナリズム、データ可視化、データに意味を持たせる画像と映像、データ ジャーナリズムのツール、Tableau、Tableau Public、Google Data Studio、Amazon QuickSight、Qlik、QlikView、Publish to Web</value>
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>データ ジャーナリズム | Microsoft Power BI</value>
  </data>
  <data name="Modal_Cta" xml:space="preserve">
    <value>今すぐ見る</value>
  </data>
  <data name="Modal_Heading" xml:space="preserve">
    <value>チュートリアルを見るにはメールアドレスを入力してください</value>
  </data>
  <data name="PublishToWeb_Content" xml:space="preserve">
    <value>最良のストーリーは対話型で見栄えが良く、豊富なデータが含まれていることが多くあります。Power BI Publish to Web によってメディアはコードを書き込む必要がなく、簡単に対話的なデータを可視化してストーリーにすることができます。</value>
  </data>
  <data name="PublishToWeb_Cta" xml:space="preserve">
    <value>詳細情報</value>
  </data>
  <data name="PublishToWeb_Heading" xml:space="preserve">
    <value>画像と映像用の Power BI Publish to Web についての詳細</value>
  </data>
  <data name="ReadMore" xml:space="preserve">
    <value>詳細情報</value>
  </data>
  <data name="SeeMore" xml:space="preserve">
    <value>詳細情報</value>
  </data>
  <data name="TakeAdvantage" xml:space="preserve">
    <value>Power BI を活用する</value>
  </data>
  <data name="UseItFree_Cta" xml:space="preserve">
    <value>無料で使用</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>159</value>
  </data>
</root>