<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChoosingGraphics_Content" xml:space="preserve">
    <value>데이터를 표현하기 적합한 그래픽 양식을 선택하는 방법 알아보기</value>
  </data>
  <data name="ChoosingGraphics_Heading" xml:space="preserve">
    <value>그래픽 선택</value>
  </data>
  <data name="DataExploration_Content" xml:space="preserve">
    <value>시각화를 사용하여 데이터에서 정확한 의미 파악 및 탐색</value>
  </data>
  <data name="DataExploration_Heading" xml:space="preserve">
    <value>데이터 탐색</value>
  </data>
  <data name="DesignNarrative_Content" xml:space="preserve">
    <value>디자인 개념을 알고 호소력 있는 데이터 시각화 만들기</value>
  </data>
  <data name="DesignNarrative_Heading" xml:space="preserve">
    <value>디자인 및 내러티브</value>
  </data>
  <data name="Hero_Content" xml:space="preserve">
    <value>&lt;p&gt;Microsoft Power BI의 &lt;strong&gt;데이터 시각화 및 스토리텔링&lt;/strong&gt; 섹션을 시작합니다. 유명한 데이터 시각화 전문가인 &lt;a href="{0}"&gt;Alberto Cairo&lt;/a&gt;와 함께 시각화 관련 방법과 데이터 스토리텔링을 지원하는 방법을 공유합니다. 이번 과정의 목표는 내러티브를 구성하고 대상 그룹에 호소력 있는 방식으로 유용한 정보를 제공하는 데 시각화가 얼마나 강력한 도구인지를 보여주는 데 있습니다.&lt;/p&gt;
&lt;p&gt;
데이터 시각화 도구를 자신의 스토리텔링에 사용하는 방법을 이해하는 데 도움이 되는 Alberto의 핵심 내용이 담긴 Power BI 데모와 자습서가 충분히 제공됩니다.
&lt;/p&gt;
&lt;p&gt;데이터 시각화의 개념, 디자인 및 분석적 측면을 충분히 이해하고 자신의 스토리텔링에 적용하는 데 도움이 되시길 바랍니다.&lt;/p&gt;</value>
    <comment>0 = link</comment>
  </data>
  <data name="Hero_Cta" xml:space="preserve">
    <value>학습 시작</value>
  </data>
  <data name="Hero_Title" xml:space="preserve">
    <value>데이터 스토리텔링 및 시각화</value>
  </data>
  <data name="IntroToVisualization_Content" xml:space="preserve">
    <value>다양한 종류의 그래픽을 활용하여 데이터 이해 및 대상 그룹과 커뮤니케이션</value>
  </data>
  <data name="IntroToVisualization_Heading" xml:space="preserve">
    <value>시각화 소개</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value />
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>데이터 저널리즘 과정 | Microsoft Power BI</value>
  </data>
  <data name="TruthfulVisualizations_Content" xml:space="preserve">
    <value>효과적으로 진실성 있게 공유하려는 정보 제시</value>
  </data>
  <data name="TruthfulVisualizations_Heading" xml:space="preserve">
    <value>진정한 시각화</value>
  </data>
  <data name="WatchNow_Cta" xml:space="preserve">
    <value>지금 보기</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>159</value>
  </data>
</root>