<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdvancedDownloadOptions" xml:space="preserve">
    <value>고급 다운로드 옵션</value>
  </data>
  <data name="Complete_Copy" xml:space="preserve">
    <value>Power BI Desktop은 분석을 빌드하기 위한 세련된 종단 간 솔루션입니다. Desktop에는 Power BI를 통해 신속하게 데이터 정보를 연결, 셰이핑, 시각화 및 공유할 수 있는 모든 기능이 있습니다.</value>
  </data>
  <data name="Complete_Heading" xml:space="preserve">
    <value>전체 분석 수명 주기</value>
  </data>
  <data name="DesignOnce_Copy" xml:space="preserve">
    <value>Microsoft는 언제, 어디서든 의사 결정자가 필요로 할 때 데이터를 제공해야 하는 필요성을 공감하고 있습니다. Power BI를 사용하면 유용한 대화형 보고서를 쉽게 게시하고 공유할 수 있습니다.</value>
  </data>
  <data name="DesignOnce_Heading" xml:space="preserve">
    <value>한 번 설계하면 어디서든 확인 가능</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>다운로드</value>
  </data>
  <data name="Hero_Copy" xml:space="preserve">
    <value>Power BI Desktop은 직관적인 보고서 작성 환경을 통해 시각적 분석을 즉시 제공합니다. 유연하고 유동적인 캔버스에서 원하는 위치에 정확하게 콘텐츠를 끌어서 놓아 배치해 보세요. 연결된 대화형 시각화의 단일 통합 보기를 탐색하면서 빠르게 패턴을 발견할 수 있습니다.</value>
  </data>
  <data name="Hero_Heading" xml:space="preserve">
    <value>Power BI Desktop으로 뛰어난 보고서를 만들고 데이터 시각화를 구현해 보세요.</value>
  </data>
  <data name="LearnMore" xml:space="preserve">
    <value>자세히 알아보기</value>
  </data>
  <data name="LearnMore_Heading" xml:space="preserve">
    <value>시작하는 방법에 대해 자세히 알아보고 지금 Power BI Desktop을 다운로드하세요.</value>
  </data>
  <data name="META_DESCRIPTION" xml:space="preserve">
    <value>Power BI는 사용자가 중요한 내용에 집중할 수 있도록 회사의 데이터를 수집 및 구성이 가능한 풍부한 시각적 요소로 변환해 줍니다. 정보를 꾸준히 얻고 추세를 파악하여 비즈니스를 확장해 보세요.</value>
  </data>
  <data name="META_KEYWORDS" xml:space="preserve">
    <value />
  </data>
  <data name="META_PAGETITLE" xml:space="preserve">
    <value>Power BI Desktop | Microsoft Power BI</value>
  </data>
  <data name="Transform_Copy" xml:space="preserve">
    <value>분석을 위해 데이터를 준비하는 작업은 시간이 오래 걸릴 수 있습니다. Microsoft는 이 작업을 훨씬 간단하게 만들기 위해 노력하고 있습니다. Power BI Desktop의 데이터 셰이핑 및 모델링 기능을 사용하여 바쁜 일상에서 시간을 절약하세요.</value>
  </data>
  <data name="Transform_Heading" xml:space="preserve">
    <value>데이터 변환 및 정리</value>
  </data>
  <data name="WhatsNew" xml:space="preserve">
    <value>새로운 기능</value>
  </data>
  <data name="WhatsNew_Copy" xml:space="preserve">
    <value>Microsoft는 업데이트를 제공하고 최상의 환경을 제공하기 위해 계속 노력하고 있습니다. 최신 Power BI Desktop 버전의 새로운 기능에 대해 알아보세요.</value>
  </data>
  <data name="Meta_LocJobId" xml:space="preserve">
    <value>3</value>
  </data>
</root>